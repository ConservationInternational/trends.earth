"""Classes for interfacing UI with report models."""
from qgis.PyQt.QtWidgets import (
    QMenu,
    QPushButton
)

from ..jobs.models import Job
from .template_manager import template_manager
from .models import ReportConfiguration
from ..utils import FileUtils


class DatasetReportHandler:
    """
    Enables report generation and viewing, as well as template editing for
    each dataset generated by the algorithms.
    """
    def __init__(self, rpt_btn: QPushButton, job: Job) -> None:
        self._rpt_btn = rpt_btn
        self._job = job
        self._rpt_menu = QMenu()
        self._view_rpt_action = None
        self._open_template_action = None
        self._rpt_config = None

    @property
    def report_button(self) -> QPushButton:
        return self._rpt_btn

    @property
    def job(self) -> Job:
        return self._job

    @property
    def report_menu(self) -> QMenu:
        return self._rpt_menu

    def init(self) -> None:
        """Creates sub-menus and set state based on job status."""
        self._view_rpt_action = self._rpt_menu.addAction(
            FileUtils.get_icon('view.svg'),
            'View report'
        )
        self._view_rpt_action.triggered.connect(self.view_report)

        self._open_template_action = self._rpt_menu.addAction(
            FileUtils.get_icon('layout.svg'),
            'Open template'
        )
        self._open_template_action.triggered.connect(self.open_designer)

        self._rpt_btn.setMenu(self._rpt_menu)

        # Check report configuration
        scope = self._job.script.name
        single_scope_configs = template_manager.single_scope_configs()
        configs = template_manager.configs_by_scope_name(
            scope,
            single_scope_configs
        )
        # Pick the first one if there are multiple
        if len(configs) > 0:
            self._rpt_config = configs[0]
        else:
            self._rpt_btn.setVisible(False)

    @property
    def report_config(self) -> ReportConfiguration:
        """
        Returns the active report configuration based on the scope
        defined, if any, in the templates file.
        """
        return self._rpt_config

    def view_report(self):
        # View report in the default pdf or image viewer.
        pass

    def open_designer(self):
        # Open template in the QGIS layout designer.
        pass