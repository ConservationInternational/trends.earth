"""Classes for interfacing UI with report models."""

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtWidgets import (
    QMenu,
    QPushButton
)

from te_schemas.jobs import JobStatus

from ..jobs.models import Job
from ..logger import log
from .models import (
    ReportConfiguration,
    ReportTaskContext
)

from .generator import report_generator
from .template_manager import template_manager
from .utils import (
    job_has_report,
    job_has_results
)
from ..utils import FileUtils


class DatasetReportHandler:
    """
    Enables report generation and viewing, as well as template editing for
    each dataset generated by the algorithms.
    """
    def __init__(self, rpt_btn: QPushButton, job: Job) -> None:
        self._rpt_btn = rpt_btn
        self._job = job
        self._rpt_menu = QMenu()
        self._view_rpt_action = None
        self._open_template_action = None
        self._rpt_config = None
        self._rpt_task_ctx = None
        self._regenerate_report = False

    @property
    def report_button(self) -> QPushButton:
        return self._rpt_btn

    @property
    def job(self) -> Job:
        return self._job

    @property
    def report_menu(self) -> QMenu:
        return self._rpt_menu

    def init(self) -> None:
        """Creates sub-menus and set state based on job status."""
        self._view_rpt_action = self._rpt_menu.addAction(
            FileUtils.get_icon('view.svg'),
            'View report'
        )
        self._view_rpt_action.triggered.connect(self.view_report)

        self._open_template_action = self._rpt_menu.addAction(
            FileUtils.get_icon('layout.svg'),
            'Open template'
        )
        self._open_template_action.triggered.connect(self.open_designer)

        self._rpt_btn.setMenu(self._rpt_menu)

        # Check report configuration
        scope = self._job.script.name
        single_scope_configs = template_manager.single_scope_configs()
        configs = template_manager.configs_by_scope_name(
            scope,
            single_scope_configs
        )

        if len(configs) == 0:
            self._rpt_btn.setVisible(False)
            return
        else:
            self._rpt_config = configs[0]

        # Check if qpt should be included in the output
        if self._rpt_config.output_options.include_qpt:
            self._open_template_action.setEnabled(True)
        else:
            self._open_template_action.setEnabled(False)

        # Enable/disable report button based on job and results status
        rpt_status = self._check_job_report_status()
        self._rpt_btn.setEnabled(rpt_status)

        # For previously finished jobs but there is no report, submit the
        # job for report generation.
        if self._regenerate_report and \
                not report_generator.is_task_running(self.report_task_id):
            self.generate_report()

    def _check_job_report_status(self) -> bool:
        # Check job status, assert datasets are available and no report has
        # been generated yet.
        if not self._job.status in (
                JobStatus.DOWNLOADED,
                JobStatus.GENERATED_LOCALLY
        ):
            return False

        if not job_has_results(self._job):
            return False

        else:
            if not job_has_report(
                    self._job,
                    self._rpt_config.output_options
            ):
                self._regenerate_report = True
                return False

        return True

    @property
    def report_config(self) -> ReportConfiguration:
        """
        Returns the active report configuration based on the scope
        defined, if any, in the templates file.
        """
        return self._rpt_config

    @property
    def task_context(self) -> ReportTaskContext:
        """
        Returns an instance of the report task context that has been used
        to generate the corresponding report. This is for jobs that have
        successfully finished with the results in the datasets folder,
        otherwise it will return None.
        """
        return self._rpt_task_ctx

    @property
    def report_task_id(self) -> str:
        """
        Returns the task_id for generating the report which, in this case,
        corresponds to the job id..
        """
        return str(self._job.id)

    def view_report(self):
        # View report in the default pdf or image viewer.
        pass

    def open_designer(self):
        # Open template in the QGIS layout designer.
        pass

    @classmethod
    def tr(cls, source):
        return QCoreApplication.translate(
            'DatasetReportHandler',
            source
        )

    def generate_report(self):
        # Create report task context for report generation.
        self._rpt_task_ctx = ReportTaskContext(
            self._rpt_config,
            [self._job]
        )

        report_generator.process_report_task(
            self._rpt_task_ctx
        )
