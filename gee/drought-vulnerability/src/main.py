"""
Code for calculating all three SDG 15.3.1 sub-indicators.
"""
# Copyright 2017 Conservation International

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import random
from builtins import str

import ee
from te_algorithms.gee.download import download
from te_algorithms.gee.util import TEImage
from te_schemas.schemas import BandInfo


def drought_vulnerability(params, EXECUTION_ID, logger):
    proj = ee.ImageCollection(params['population']['asset']
                              ).toBands().projection()

    lag = int(params['spi']['lag'])

    out = download(
        'users/geflanddegradation/toolbox_datasets/jrc_global_drought_vulnerability_map',
        'Drought Vulnerability (JRC)', 'one time', None, None, logger
    )
    # Save as int16 to be compatible with other data
    out.image = out.image.multiply(10000).int16()
    out.band_info[0].metadata.update({'scaling': .0001, 'year': 2018})

    logger.debug("Getting SPI and population data...")

    # Be inclusive of final year (+1)

    for year in range(params['year_initial'], params['year_final'] + 1):
        add_to_map = bool(((year - params['year_initial']) % 4) == 0)
        out.merge(_get_spi(year, lag, params.get('spi'), logger, add_to_map))

    # Be inclusive of final year (+1)

    for year in range(params['year_initial'], params['year_final'] + 1):
        add_to_map = bool(((year - params['year_initial']) % 4) == 0)
        out.merge(
            _get_population(
                year, params.get('population'), logger, add_to_map
            )
        )

    out.merge(
        _get_water(params['year_initial'], params.get('land_cover'), logger)
    )

    out.image = out.image.unmask(-32768).int16()

    return out.export(
        params.get('geojsons'), 'drought_vulnerability', params.get('crs'),
        logger, EXECUTION_ID, proj
    )


def _get_water(year, params, logger, add_to_map=False):
    lc = ee.Image(params['asset'])
    lc = lc.select(f'y{year}')
    water = lc.eq(210)
    water = water.where(lc.eq(9999), -32768).updateMask(water.neq(-32768))

    return TEImage(
        water, [
            BandInfo(
                "Water mask",
                metadata={
                    'year': year,
                    'source': params['source']
                },
                add_to_map=False
            )
        ]
    )


def _get_population(year, params, logger, add_to_map=False):
    '''Return WorldPop population data for a given year'''
    logger.debug("Returning population image")

    wp = ee.ImageCollection(params['asset']
                            ).filterDate(f'{year}-01-01', f'{year + 1}-01-01')
    wp = wp.select('male').toBands(
    ).rename(f'Population_{year}_male').addBands(
        wp.select('female').toBands().rename(f'Population_{year}_female')
    ).int16()

    return TEImage(
        wp, [
            BandInfo(
                "Population (number of people)",
                metadata={
                    'year': year,
                    'type': 'male',
                    'source': params['source'],
                },
                add_to_map=add_to_map
            ),
            BandInfo(
                "Population (number of people)",
                metadata={
                    'year': year,
                    'type': 'female',
                    'source': params['source'],
                },
                add_to_map=add_to_map
            )
        ]
    )


def _get_spi(year, lag, params, logger, add_to_map=False):
    '''Return SPI image for a particular year and lag'''
    spi_img = ee.Image(f"{params['asset']}{lag}").select(f'spi_{year}_{lag}')

    return TEImage(
        spi_img.unmask(-32768).int16(), [
            BandInfo(
                "Standardized Precipitation Index (SPI)",
                metadata={
                    'year': year,
                    'lag': lag,
                    'source': params['source'],
                },
                add_to_map=add_to_map
            )
        ]
    )


def run(params, logger):
    """."""
    logger.debug("Loading parameters.")

    # Check the ENV. Are we running this locally or in prod?

    if params.get('ENV') == 'dev':
        EXECUTION_ID = str(random.randint(1000000, 99999999))
    else:
        EXECUTION_ID = params.get('EXECUTION_ID', None)

    out = drought_vulnerability(params, EXECUTION_ID, logger)

    return out
